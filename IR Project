{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Information Retrieval Final Project\n","## Bar Dolev 318419512\n","## Ido Paretsky 318510252\n","\n","### https://github.com/IdoParetsky/Information-Retrieval-Final-Project\n","### https://drive.google.com/drive/u/0/folders/1uxQRHS3lpENpNbJqYE1I4ZWKsu0Nn1uk"],"metadata":{"id":"pBIYmR2y0jQK"}},{"cell_type":"markdown","source":["GitHub Repository init. from within Google Drive"],"metadata":{"id":"QijpDuYg0i0J"}},{"cell_type":"code","source":["\"\"\"\n","from google.colab import drive\n","drive.mount('/content/drive')\n","%cd /content/drive/MyDrive/Information Retrieval/Project\n","# GitHub Access Token: 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\n","!git init information-retrieval-final-project\n","\"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nZpg47mx0iSL","executionInfo":{"status":"ok","timestamp":1672082446810,"user_tz":-120,"elapsed":2333,"user":{"displayName":"Ido Paretsky","userId":"00866448096400107402"}},"outputId":"41d79ccc-e727-484a-b2f7-b350f5dae4be"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive/Information Retrieval/Project\n","Reinitialized existing Git repository in /content/drive/MyDrive/Information Retrieval/Project/information-retrieval-final-project/.git/\n","/content/drive/MyDrive/Information Retrieval/Project/information-retrieval-final-project\n"]}]},{"cell_type":"markdown","source":["Initial Commit"],"metadata":{"id":"n1sfpWma-Eut"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","%cd /content/drive/MyDrive/Information Retrieval/Project/information-retrieval-final-project/\n","!git config --global user.name \"Y\"\n","!git add .\n","!git status\n","!git commit -m \"Initial Commit - IR Project.ipynb, queries_train.json, run_frontend_in_colab.ipynb, run_frontend_in_gcp.sh, search_frontend.py, startup_script_gcp.sh\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X_v8hDGz1gnW","executionInfo":{"status":"ok","timestamp":1672084297775,"user_tz":-120,"elapsed":2755,"user":{"displayName":"Ido Paretsky","userId":"00866448096400107402"}},"outputId":"77f5ba5a-4262-493e-8a69-99acaf582903"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive/Information Retrieval/Project/information-retrieval-final-project\n","On branch master\n","\n","No commits yet\n","\n","Changes to be committed:\n","  (use \"git rm --cached <file>...\" to unstage)\n","\n","\t\u001b[32mnew file:   IR Project\u001b[m\n","\t\u001b[32mnew file:   queries_train.json\u001b[m\n","\t\u001b[32mnew file:   run_frontend_in_colab.ipynb\u001b[m\n","\t\u001b[32mnew file:   run_frontend_in_gcp.sh\u001b[m\n","\t\u001b[32mnew file:   search_frontend.py\u001b[m\n","\t\u001b[32mnew file:   startup_script_gcp.sh\u001b[m\n","\n","\n","*** Please tell me who you are.\n","\n","Run\n","\n","  git config --global user.email \"you@example.com\"\n","  git config --global user.name \"Your Name\"\n","\n","to set your account's default identity.\n","Omit --global to set the identity only in this repository.\n","\n","fatal: unable to auto-detect email address (got 'root@db81bf862aa3.(none)')\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"3TlkC7C10ZkU"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZNupk5u9wUUI"},"outputs":[],"source":["search_frontend.py‚Äè\n","from flask import Flask, request, jsonify\n","\n","class MyFlaskApp(Flask):\n","    def run(self, host=None, port=None, debug=None, **options):\n","        super(MyFlaskApp, self).run(host=host, port=port, debug=debug, **options)\n","\n","app = MyFlaskApp(__name__)\n","app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False\n","\n","\n","@app.route(\"/search\")\n","def search():\n","    ''' Returns up to a 100 of your best search results for the query. This is \n","        the place to put forward your best search engine, and you are free to\n","        implement the retrieval whoever you'd like within the bound of the \n","        project requirements (efficiency, quality, etc.). That means it is up to\n","        you to decide on whether to use stemming, remove stopwords, use \n","        PageRank, query expansion, etc.\n","\n","        To issue a query navigate to a URL like:\n","         http://YOUR_SERVER_DOMAIN/search?query=hello+world\n","        where YOUR_SERVER_DOMAIN is something like XXXX-XX-XX-XX-XX.ngrok.io\n","        if you're using ngrok on Colab or your external IP on GCP.\n","    Returns:\n","    --------\n","        list of up to 100 search results, ordered from best to worst where each \n","        element is a tuple (wiki_id, title).\n","    '''\n","    res = []\n","    query = request.args.get('query', '')\n","    if len(query) == 0:\n","      return jsonify(res)\n","    # BEGIN SOLUTION\n","\n","    # END SOLUTION\n","    return jsonify(res)\n","\n","@app.route(\"/search_body\")\n","def search_body():\n","    ''' Returns up to a 100 search results for the query using TFIDF AND COSINE\n","        SIMILARITY OF THE BODY OF ARTICLES ONLY. DO NOT use stemming. DO USE the \n","        staff-provided tokenizer from Assignment 3 (GCP part) to do the \n","        tokenization and remove stopwords. \n","\n","        To issue a query navigate to a URL like:\n","         http://YOUR_SERVER_DOMAIN/search_body?query=hello+world\n","        where YOUR_SERVER_DOMAIN is something like XXXX-XX-XX-XX-XX.ngrok.io\n","        if you're using ngrok on Colab or your external IP on GCP.\n","    Returns:\n","    --------\n","        list of up to 100 search results, ordered from best to worst where each \n","        element is a tuple (wiki_id, title).\n","    '''\n","    res = []\n","    query = request.args.get('query', '')\n","    if len(query) == 0:\n","      return jsonify(res)\n","    # BEGIN SOLUTION\n","\n","    # END SOLUTION\n","    return jsonify(res)\n","\n","@app.route(\"/search_title\")\n","def search_title():\n","    ''' Returns ALL (not just top 100) search results that contain A QUERY WORD \n","        IN THE TITLE of articles, ordered in descending order of the NUMBER OF \n","        QUERY WORDS that appear in the title. For example, a document with a \n","        title that matches two of the query words will be ranked before a \n","        document with a title that matches only one query term. \n","\n","        Test this by navigating to the a URL like:\n","         http://YOUR_SERVER_DOMAIN/search_title?query=hello+world\n","        where YOUR_SERVER_DOMAIN is something like XXXX-XX-XX-XX-XX.ngrok.io\n","        if you're using ngrok on Colab or your external IP on GCP.\n","    Returns:\n","    --------\n","        list of ALL (not just top 100) search results, ordered from best to \n","        worst where each element is a tuple (wiki_id, title).\n","    '''\n","    res = []\n","    query = request.args.get('query', '')\n","    if len(query) == 0:\n","      return jsonify(res)\n","    # BEGIN SOLUTION\n","\n","    # END SOLUTION\n","    return jsonify(res)\n","\n","@app.route(\"/search_anchor\")\n","def search_anchor():\n","    ''' Returns ALL (not just top 100) search results that contain A QUERY WORD \n","        IN THE ANCHOR TEXT of articles, ordered in descending order of the \n","        NUMBER OF QUERY WORDS that appear in anchor text linking to the page. \n","        For example, a document with a anchor text that matches two of the \n","        query words will be ranked before a document with anchor text that \n","        matches only one query term. \n","\n","        Test this by navigating to the a URL like:\n","         http://YOUR_SERVER_DOMAIN/search_anchor?query=hello+world\n","        where YOUR_SERVER_DOMAIN is something like XXXX-XX-XX-XX-XX.ngrok.io\n","        if you're using ngrok on Colab or your external IP on GCP.\n","    Returns:\n","    --------\n","        list of ALL (not just top 100) search results, ordered from best to \n","        worst where each element is a tuple (wiki_id, title).\n","    '''\n","    res = []\n","    query = request.args.get('query', '')\n","    if len(query) == 0:\n","      return jsonify(res)\n","    # BEGIN SOLUTION\n","    \n","    # END SOLUTION\n","    return jsonify(res)\n","\n","@app.route(\"/get_pagerank\", methods=['POST'])\n","def get_pagerank():\n","    ''' Returns PageRank values for a list of provided wiki article IDs. \n","\n","        Test this by issuing a POST request to a URL like:\n","          http://YOUR_SERVER_DOMAIN/get_pagerank\n","        with a json payload of the list of article ids. In python do:\n","          import requests\n","          requests.post('http://YOUR_SERVER_DOMAIN/get_pagerank', json=[1,5,8])\n","        As before YOUR_SERVER_DOMAIN is something like XXXX-XX-XX-XX-XX.ngrok.io\n","        if you're using ngrok on Colab or your external IP on GCP.\n","    Returns:\n","    --------\n","        list of floats:\n","          list of PageRank scores that correrspond to the provided article IDs.\n","    '''\n","    res = []\n","    wiki_ids = request.get_json()\n","    if len(wiki_ids) == 0:\n","      return jsonify(res)\n","    # BEGIN SOLUTION\n","\n","    # END SOLUTION\n","    return jsonify(res)\n","\n","@app.route(\"/get_pageview\", methods=['POST'])\n","def get_pageview():\n","    ''' Returns the number of page views that each of the provide wiki articles\n","        had in August 2021.\n","\n","        Test this by issuing a POST request to a URL like:\n","          http://YOUR_SERVER_DOMAIN/get_pageview\n","        with a json payload of the list of article ids. In python do:\n","          import requests\n","          requests.post('http://YOUR_SERVER_DOMAIN/get_pageview', json=[1,5,8])\n","        As before YOUR_SERVER_DOMAIN is something like XXXX-XX-XX-XX-XX.ngrok.io\n","        if you're using ngrok on Colab or your external IP on GCP.\n","    Returns:\n","    --------\n","        list of ints:\n","          list of page view numbers from August 2021 that correrspond to the \n","          provided list article IDs.\n","    '''\n","    res = []\n","    wiki_ids = request.get_json()\n","    if len(wiki_ids) == 0:\n","      return jsonify(res)\n","    # BEGIN SOLUTION\n","\n","    # END SOLUTION\n","    return jsonify(res)\n","\n","\n","if __name__ == '__main__':\n","    # run the Flask RESTful API, make the server publicly available (host='0.0.0.0') on port 8080\n","    app.run(host='0.0.0.0', port=8080, debug=True)"]}]}